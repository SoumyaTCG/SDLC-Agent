import streamlit as st
from IPython.display import Image, display
from Common_Utility.state import SDLCState


class DisplayResultStreamlit:
    """
    Handles displaying the result generated by the SDLC agent and collecting feedback.
    """

    def __init__(self, sdlc_graph, user_requirement):
        """
        Initializes the result display component.

        Args:
            sdlc_graph (object): Compiled graph object.
            user_requirement (str): User-provided input.
        """
        self.sdlc_graph = sdlc_graph
        self.user_requirement = user_requirement

    def collect_feedback(self, phase: str, sdlc_state: SDLCState) -> None:
        """
        Collects feedback from the user for the given phase and updates the SDLC state.

        Args:
            phase (str): The current phase (e.g., "user_story_generate", "design").
            sdlc_state (SDLCState): The shared state object.
        """
        st.subheader(f"üìù Feedback for {phase.capitalize()} Phase")

        # Quick Feedback
        quick_feedback = st.radio(
            f"Overall, how would you rate the {phase} phase?",
            options=["Good", "Bad"],
            index=0,
            help="Select 'Good' if the output meets your expectations, 'Bad' otherwise."
        )

        # Detailed Feedback
        detailed_feedback = st.text_area(
            f"Provide detailed feedback for the {phase} phase:",
            placeholder="Write your feedback here...",
            height=150,
            help="Please provide specific feedback to help improve the output."
        )

        # Rating with Stars (using a slider)
        rating = st.slider(
            f"Rate the {phase} phase (1-5 stars):",
            min_value=1,
            max_value=5,
            value=5,
            help="Slide to rate the phase from 1 to 5 stars."
        )

        # Checkboxes for Specific Issues
        st.write("Select specific issues (if any):")
        missing_requirements = st.checkbox("Missing Requirements", help="Check if any requirements are missing.")
        inaccurate_info = st.checkbox("Inaccurate Information", help="Check if any information is inaccurate.")
        poor_formatting = st.checkbox("Poor Formatting", help="Check if the formatting is poor.")

        # Update SDLC State
        sdlc_state.feedback[phase] = {
            "quick_feedback": quick_feedback,
            "detailed_feedback": detailed_feedback,
            "rating": rating,
            "missing_requirements": missing_requirements,
            "inaccurate_info": inaccurate_info,
            "poor_formatting": poor_formatting
        }

        st.session_state[f"{phase}_feedback"] = sdlc_state.feedback[phase]  # Store feedback in session state
        st.write(f"DEBUG: Phase: {phase}")
        st.write(f"DEBUG: Type of sdlc_state.feedback: {type(sdlc_state.feedback)}")
        st.write(f"DEBUG: Value of sdlc_state.feedback: {sdlc_state.feedback}")
    
    def display_result_on_ui(self, sdlc_state: SDLCState):
        """
        Displays the output from the SDLC agent on the UI and collects feedback after each phase.

        Args:
            sdlc_state (SDLCState): The shared state object.
        """
        config = {
            "configurable": {
                "thread_id": "1"
            }
        }

        with st.spinner("üöÄ Generating response..."):
            try:
                # Stream updates from the graph
                for updates in self.sdlc_graph.stream({'requirement': self.user_requirement}, config=config):
                    st.write("DEBUG: Updates from Graph", updates)  # Debugging line

                    # User Story Phase
                    if "user_story_generate" in updates:
                        user_story = updates["user_story_generate"]
                        if user_story.get("user_stories"):
                            st.subheader("üìñ User Story")
                            st.write(user_story["user_stories"])
                            sdlc_state.user_stories = user_story["user_stories"]
                        # Collect feedback for the user story phase
                        self.collect_feedback("user_story_generate", sdlc_state)

                    # Design Phase
                    if "design" in updates:
                        design_specification = updates["design"]
                        if design_specification.get("design_specification"):
                            st.subheader("üìê Design Specification")
                            st.write(design_specification["design_specification"])
                            sdlc_state.design_specification = design_specification["design_specification"]
                        # Collect feedback for the design phase
                        self.collect_feedback("design", sdlc_state)

                    # Development Phase
                    if "generate_code" in updates:
                        development = updates["generate_code"]
                        if development.get("code"):
                            st.subheader("üíª Code")
                            st.write(development["code"])
                            sdlc_state.code = development["code"]
                        # Collect feedback for the development phase
                        self.collect_feedback("generate_code", sdlc_state)

                    # Testing Phase
                    if "test_case_generate" in updates:
                        test_cases = updates["test_case_generate"]
                        if test_cases.get("test_cases"):
                            st.subheader("üß™ Test Cases")
                            st.write(test_cases["test_cases"])
                            sdlc_state.test_cases = test_cases["test_cases"]
                        # Collect feedback for the testing phase
                        self.collect_feedback("test_case_generate", sdlc_state)

            except Exception as e:
                st.error(f"‚ùå An error occurred: {e}")